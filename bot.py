import uuid as _uuid
import logging, os, requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from config import BOT_TOKEN, API_URL
from db import init_db, get_user, add_user

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü/—Ä–µ–≥–∏–æ–Ω–æ–≤)
init_db()

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    user = get_user(tg_id)
    if not user:
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID v4
        new_uuid = str(_uuid.uuid4())
        add_user(tg_id, new_uuid)
    else:
        new_uuid = user["uuid"]

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª
    btn = InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞", callback_data=f"sub:{new_uuid}")
    markup = InlineKeyboardMarkup([[btn]])
    await update.message.reply_text("–í–∞—à –µ–¥–∏–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∫ VPN:", reply_markup=markup)

async def on_button(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # "sub:UUID"
    if data.startswith("sub:"):
        uuid = data.split(":",1)[1]
        link = f"{API_URL}/{uuid}"
        text = (
            "‚ú® –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
            f"`{link}`\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ V2RayN/Clash/Shadowrocket\n"
            "‚Äî –∏ –≤ –∫–ª–∏–µ–Ω—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (RU/US/KZ)."
        )
        await query.edit_message_text(text, parse_mode="Markdown")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(on_button))
    app.run_polling()

if __name__ == "__main__":
    main()
